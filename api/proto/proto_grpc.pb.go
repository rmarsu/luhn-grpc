// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: api/proto/proto.proto

package grpc_luhn

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ValidClient is the client API for Valid service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ValidClient interface {
	Valid(ctx context.Context, in *ValidRequest, opts ...grpc.CallOption) (*ValidResponse, error)
}

type validClient struct {
	cc grpc.ClientConnInterface
}

func NewValidClient(cc grpc.ClientConnInterface) ValidClient {
	return &validClient{cc}
}

func (c *validClient) Valid(ctx context.Context, in *ValidRequest, opts ...grpc.CallOption) (*ValidResponse, error) {
	out := new(ValidResponse)
	err := c.cc.Invoke(ctx, "/luhn.Valid/Valid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ValidServer is the server API for Valid service.
// All implementations must embed UnimplementedValidServer
// for forward compatibility
type ValidServer interface {
	Valid(context.Context, *ValidRequest) (*ValidResponse, error)
	mustEmbedUnimplementedValidServer()
}

// UnimplementedValidServer must be embedded to have forward compatible implementations.
type UnimplementedValidServer struct {
}

func (UnimplementedValidServer) Valid(context.Context, *ValidRequest) (*ValidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Valid not implemented")
}
func (UnimplementedValidServer) mustEmbedUnimplementedValidServer() {}

// UnsafeValidServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ValidServer will
// result in compilation errors.
type UnsafeValidServer interface {
	mustEmbedUnimplementedValidServer()
}

func RegisterValidServer(s grpc.ServiceRegistrar, srv ValidServer) {
	s.RegisterService(&Valid_ServiceDesc, srv)
}

func _Valid_Valid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidServer).Valid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luhn.Valid/Valid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidServer).Valid(ctx, req.(*ValidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Valid_ServiceDesc is the grpc.ServiceDesc for Valid service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Valid_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "luhn.Valid",
	HandlerType: (*ValidServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Valid",
			Handler:    _Valid_Valid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/proto.proto",
}
